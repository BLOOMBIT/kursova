import requests
from bs4 import BeautifulSoup
import urllib.parse
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import re


def get_first_product_url(query):
    search_url = f"https://podorozhnyk.ua/ru/search/?query={urllib.parse.quote(query)}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(search_url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    product_link_tag = soup.select_one('div.product-card__preview a')
    if product_link_tag:
        return urllib.parse.urljoin("https://podorozhnyk.ua", product_link_tag['href'])
    return None


def get_reviews_distribution(product_url):
    reviews_url = product_url.rstrip('/') + "/reviews/"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(reviews_url, headers=headers)
    soup = BeautifulSoup(response.content, 'html.parser')

    rating_counts = {str(i): 0 for i in range(1, 6)}
    rating_blocks = soup.select('div.ratings__item')

    for block in rating_blocks:
        stars = block.get("data-max-rating")
        count_tag = block.select_one("div.item__comments-count")
        if stars and count_tag:
            match = re.search(r'\d+', count_tag.text)
            count = int(match.group()) if match else 0
            rating_counts[stars] = count

    return rating_counts, reviews_url


def visualize_all_in_one(rating_counts):
    stars = sorted(rating_counts.keys(), reverse=True)
    counts = [rating_counts[star] for star in stars]
    total_reviews = sum(counts)

    # –ò–Ω–¥–µ–∫—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if total_reviews > 0:
        weighted_sum = sum(int(star) * count for star, count in rating_counts.items())
        index = (weighted_sum / total_reviews) * 20
    else:
        index = 0

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig, axs = plt.subplots(1, 3, figsize=(18, 5))
    fig.suptitle("–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–≥—É–∫—ñ–≤ –∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º", fontsize=16)

    # –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞
    axs[0].bar(stars, counts, color='skyblue')
    axs[0].set_title("–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥–≥—É–∫—ñ–≤ (–∑—ñ—Ä–∫–∏)")
    axs[0].set_xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫")
    axs[0].set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
    axs[0].grid(axis='y')

    # –ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞
    axs[1].pie(counts, labels=[f"{star}" for star in stars], autopct='%1.1f%%', startangle=140)
    axs[1].set_title("–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –≤—ñ–¥–≥—É–∫—ñ–≤")
    axs[1].axis('equal')

    # –Ü–Ω–¥–µ–∫—Å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    axs[2].bar(['–Ü–Ω–¥–µ–∫—Å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'], [index], color='green')
    axs[2].set_ylim(0, 100)
    axs[2].set_ylabel("–ë–∞–ª–∏ –∑—ñ 100")
    axs[2].set_title("–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")

    plt.tight_layout()
    plt.subplots_adjust(top=0.85)
    plt.show()


def main():
    drug = input("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É: ").strip()
    product_url = get_first_product_url(drug)
    if product_url:
        print(f"\nüîó –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä: {product_url}")
        rating_counts, reviews_url = get_reviews_distribution(product_url)
        print(f"üí¨ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–≥—É–∫–∏: {reviews_url}")
        total = sum(rating_counts.values())
        if total == 0:
            print("‚ùå –ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –¥–∞–Ω—ñ.")
        else:
            for star, count in sorted(rating_counts.items(), reverse=True):
                print(f"{star} ‚≠ê ‚Äî {count} –≤—ñ–¥–≥—É–∫—ñ–≤")
            visualize_all_in_one(rating_counts)
    else:
        print("‚ùå –ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


main()


